# -*- coding: utf-8 -*-
# Copyright (c) 2020, ossphin and contributors
# For license information, please see license.txt

from __future__ import unicode_literals
import frappe
from frappe.model.document import Document


class SubscriptionContract(Document):
	pass

	@frappe.whitelist()
	def get_items(self):
		total = 0
		items = frappe.db.sql ("""SELECT sp.name AS package, pi.item, pi.item_name, pi.interval,pi.count, pi.rate, pi.max_bill_count, pi.item_after_max_bill 
			FROM `tabSubscription Contract` c, `tabSubscription Contract Packages` p, `tabSubscription Package` sp, `tabSubscription Package Item` pi
			WHERE c.name = p.parent AND p.package = sp.name and sp.name = pi.parent AND pi.active = 1 AND c.name = %s; """,(self.name), as_dict=1)

		for i in items:
			self.append('items',{
				"package": i.package,
				"item": i.item,
				"item_name": i.item_name,
				"interval": i.interval,
				"count": i.count,
				"rate": i.rate,
				"max_bill_count": i.max_bill_count,
				"item_after_max_bill": i.item_after_max_bill
			})
			total = total + i.rate

		self.total = total
		self.save()

	@frappe.whitelist()
	def renew_contract(self):
	   	if (self.renewal_contract != ""
			frappe.throw("A Renewal Cntract has been generated for this Subscription Contract.")

		doc = frappe.new_doc("Subscription Contract")
		doc.contract_number = self.contract_number
		doc.customer = self.customer
		doc.customer_name = self.customer_name
		doc.description = self.description
		doc.contract_date = self.contract_date
		doc.start_date = self.start_date
		doc.expiry_date = self.expiry_date
		doc.bill_expired_until_renewed = self.bill_expired_until_renewed
		doc.escalation = self.escalation

		doc.flags.ignore_mandatory = True
		doc.insert()

		self.renewal_contract = doc.name
		self.save()
