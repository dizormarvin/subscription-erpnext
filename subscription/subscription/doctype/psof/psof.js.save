// Copyright (c) 2020, ossphin and contributors
// For license information, please see license.txt

frappe.ui.form.on('PSOF', {
	// refresh: function(frm) {

	// }
    onload: function(frm){
        update_program(frm);
  
    },
	programs: function(frm) {
		update_program(frm);
	},

  
  // Dates
  // programs_add: function (frm) {
  //   var date = new Date();
  //   var firstDay = frappe.format(new Date(date.getFullYear(), date.getMonth(), 1), { fieldType:  ' Date'});
  //   // var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  //   cur_frm.set_value('start_date', firstDay)
  //   console.log(firstDay);
  // },

	before_save: function(frm) {
        ur_frm.call('update_bills','',function(r){});
        cur_frm.clear_table("bill_view");   
        cur_frm.refresh_fields();
	},
	
	subscription_program: function(frm) {
        cur_frm.clear_table("bill_view");
        cur_frm.refresh_fields(frm);
		cur_frm.call('billview','',function(r){});
	},
    
    generate: function(frm) {
        cur_frm.clear_table("bill_view");
		cur_frm.call('create_bill','',function(r){});
	},
    
    
});


var update_program = function(frm){
	frm.set_query("subscription_program", function() {
		return {
      "query": "subscription.subscription.doctype.psof.psof.get_programs",
      "filters": {
        'dname': frm.docname
      }
    };
  });
}


frappe.ui.form.on("PSOF Program Bill View", {
	bill_view_update: function(frm, cdt, cdn) {
        var d = locals[cdt][cdn];
        msgprint(d.psof_program_bill);
        
	},
});

// Update Amounts
var update_amounts = function(frm, cdt, cdn) {
	var cur_doc = locals[cdt][cdn];
	var total = 0;
	total = total + cur_doc.subscription_fee;
	
	if (cur_doc.decoder_allocation_active === 1) {
		
		total = total - cur_doc.decoder_rate;
		} 

	if (cur_doc.card_allocation_active) { 
                total = total - cur_doc.card_rate;
                } 

        if (cur_doc.promo_allocation_active) { 
                total = total - cur_doc.promo_rate;
                } 

        if (cur_doc.freight_allocation_active) { 
                total = total - cur_doc.freight_rate;
                }

	cur_doc.subscription_rate = total;
	cur_doc.no_of_subs = Math.round((cur_doc.subscription_rate/1.12) / cur_doc.rate_per_sub);
  	cur_doc.vat_amount = cur_doc.subscription_rate - Math.round((cur_doc.subscription_rate/1.12));
  	frm.refresh_fields();
    
};

frappe.ui.form.on("PSOF Program", {
  //Active Checkbox
	decoder_allocation_active: function(frm, cdt, cdn) {
		var cur_doc = locals[cdt][cdn];
		if (cur_doc.decoder_allocation_active === 1){}
		else{
			cur_doc.decoder_max_bill_count = 0;
		} 

		update_amounts(frm, cdt, cdn);
		frm.refresh_fields();
	},
  promo_allocation_active: function(frm, cdt, cdn) {
          var cur_doc = locals[cdt][cdn];
          if (cur_doc.promo_allocation_active === 1){}
          else{
                  cur_doc.promo_max_bill_count = 0;
          } 

          update_amounts(frm, cdt, cdn);
          frm.refresh_fields();
  },
  freight_allocation_active: function(frm, cdt, cdn) {
          var cur_doc = locals[cdt][cdn];
          if (cur_doc.freight_allocation_active === 1){}
          else{
                  cur_doc.freight_max_bill_count = 0;
          } 

          update_amounts(frm, cdt, cdn);
          frm.refresh_fields();
  },
  card_allocation_active: function(frm, cdt, cdn) {
          var cur_doc = locals[cdt][cdn];
          if (cur_doc.card_allocation_active === 1){}
          else{
                  cur_doc.card_max_bill_count = 0;
          } 

          update_amounts(frm, cdt, cdn);
          frm.refresh_fields();
  },
  
  renewal: function(frm, cdt, cdn) {
    var cur_doc = locals[cdt][cdn];
    if (cur_doc.renewal === 1) {
      cur_doc.active = 1
    } else {
		cur_doc.active = 0
	}
	update_amounts(frm, cdt, cdn);
      frm.refresh_fields();
  },

  subscription_program: function(frm, cdt, cdn) {
    var cur_doc = locals[cdt][cdn];
    if (cur_doc.program_name !== null) {
      var date = new Date();
      var firstDay = frappe.format(new Date(date.getFullYear(), date.getMonth(), 1), { fieldType:  ' Date'});
      var lastDay = frappe.format(new Date(date.getFullYear(), date.getMonth() + 1, 0), { fieldType:  ' Date'});
      cur_doc.start_date = firstDay
      cur_doc.end_date = lastDay
    } else {
      cur_doc.start_date = null
    }
    update_amounts(frm, cdt, cdn);
    frm.refresh_fields();
  },

  //Rates
	subscription_fee: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
        	update_amounts(frm, cdt, cdn);
	},
	decoder_rate: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
		update_amounts(frm, cdt, cdn);
	},
	promo_rate: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
		update_amounts(frm, cdt, cdn);
	},
	freight_rate: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		update_amounts(frm, cdt, cdn);
	},
	card_rate: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		update_amounts(frm, cdt, cdn);
	},

  /*  Decoder */
	decoder_calculation: function(frm, cdt, cdn) {
        var cur_doc = locals[cdt][cdn];
		cur_doc.decoder_rate = cur_doc.decoder_calculation/cur_doc.decoder_max_bill_div;
   		update_amounts(frm, cdt, cdn);
	},

	decoder_max_bill_div: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		cur_doc.decoder_rate = cur_doc.decoder_calculation/cur_doc.decoder_max_bill_div;
		update_amounts(frm, cdt, cdn);
        	frm.refresh_fields();
	},

/*  Card */
	card_calculation: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		cur_doc.card_rate = cur_doc.card_calculation/cur_doc.card_max_bill_divisor;
		update_amounts(frm, cdt, cdn);
        	frm.refresh_fields();
	},

	card_max_bill_divisor: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		cur_doc.card_rate = cur_doc.card_calculation/cur_doc.card_max_bill_divisor;
        	update_amounts(frm, cdt, cdn);
		frm.refresh_fields();
	},

/*  Promo */
	promo_calculation: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		cur_doc.promo_rate = cur_doc.promo_calculation/cur_doc.promo_max_bill_divisor;
        	update_amounts(frm, cdt, cdn);
		frm.refresh_fields();
	},

	promo_max_bill_divisor: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		cur_doc.promo_rate = cur_doc.promo_calculation/cur_doc.promo_max_bill_divisor;
        	update_amounts(frm, cdt, cdn);
		frm.refresh_fields();
	},
  /* Freight */
	freight_calculation: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		cur_doc.freight_rate = cur_doc.freight_calculation/cur_doc.freight_max_bill_divisor;
        	update_amounts(frm, cdt, cdn);
		frm.refresh_fields();
	},

	freight_max_bill_divisor: function(frm, cdt, cdn) {
        	var cur_doc = locals[cdt][cdn];
   		cur_doc.freight_rate = cur_doc.freight_calculation/cur_doc.freight_max_bill_divisor;
		update_amounts(frm, cdt, cdn);
        	frm.refresh_fields();
	},
});
